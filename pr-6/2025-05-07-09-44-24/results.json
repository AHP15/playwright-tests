{
  "config": {
    "configFile": "/home/runner/work/playwright-tests/playwright-tests/playwright.config.ts",
    "rootDir": "/home/runner/work/playwright-tests/playwright-tests/tests",
    "forbidOnly": true,
    "fullyParallel": true,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "ci": {
        "commitHref": "https://github.com/AHP15/playwright-tests/commit/3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
        "commitHash": "3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
        "prHref": "https://github.com/AHP15/playwright-tests/pull/6",
        "prTitle": "Generate Comment summary",
        "prBaseHash": "7d70ead76c8648fee47210f3b657aa9a963c74dd",
        "buildHref": "https://github.com/AHP15/playwright-tests/actions/runs/14880234906"
      },
      "gitCommit": {
        "shortHash": "3a05ae9",
        "hash": "3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
        "subject": "Merge 1379a3e53c6c63fecad8f4ecc42e4dd2631497c0 into 7d70ead76c8648fee47210f3b657aa9a963c74dd",
        "body": "Merge 1379a3e53c6c63fecad8f4ecc42e4dd2631497c0 into 7d70ead76c8648fee47210f3b657aa9a963c74dd\n",
        "author": {
          "name": "Abdessittir Harkati",
          "email": "harkati.web.dev@gmail.com",
          "time": 1746610932000
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "time": 1746610932000
        },
        "branch": "HEAD"
      },
      "gitDiff": "diff --git a/.github/scripts/parse-test-results.mjs b/.github/scripts/parse-test-results.mjs\nindex f5b77d3..530496d 100644\n--- a/.github/scripts/parse-test-results.mjs\n+++ b/.github/scripts/parse-test-results.mjs\n@@ -7,6 +7,7 @@ const workspaceDir = process.env.GITHUB_WORKSPACE || '.';\n // The path to the Playwright test results file is configured in the Playwright config file.\n const reportFilePath = join(workspaceDir, 'playwright-report', 'results.json');\n \n+let total = 0;\n let passed = 0;\n let failed = 0;\n let flaky = 0;\n@@ -22,10 +23,12 @@ try {\n   const { stats } = report;\n   if (!stats) throw new Error('No suites found in test results');\n \n-  passed = stats.expected ?? 0;\n   failed = stats.unexpected ?? 0;\n   flaky = stats.flaky ?? 0;\n   skipped = stats.skipped ?? 0;\n+  total = failed + flaky + skipped;\n+  total += stats.expected ?? 0;\n+  passed = total - failed - flaky;\n \n   info(`Parsing successful: Passed=${passed}, Failed=${failed}, Flaky=${flaky}, Skipped=${skipped}`);\n \n@@ -34,6 +37,7 @@ try {\n   setFailed(`Script failed: ${err.message}`);\n }\n \n+setOutput('total', total);\n setOutput('passed', passed);\n setOutput('failed', failed);\n setOutput('flaky', flaky);\ndiff --git a/.github/scripts/pr-comment.mjs b/.github/scripts/pr-comment.mjs\nindex c9a4b9f..0eb9a84 100644\n--- a/.github/scripts/pr-comment.mjs\n+++ b/.github/scripts/pr-comment.mjs\n@@ -13,18 +13,57 @@ try {\n   const octokit = getOctokit(token);\n   const { owner, repo, number } = context.issue\n \n-  const commentBody = `Hey`;\n+  const { TOTAL, PASSED, FAILED, FLAKY, SKIPPED, REPORT_FOLDER } = process.env;\n \n-  await octokit.rest.issues.createComment({\n+  const commentTitle = `# Playwright Test Results ${FAILED > 0 ? '❌' : '✅'}`;\n+  const commentBody = `\n+  ${commentTitle}\n+  ## Summary\n+  - **Total**: ${TOTAL}\n+  - **Passed**: ${PASSED}\n+  - **Failed**: ${FAILED}\n+  - **Flaky**: ${FLAKY}\n+  - **Skipped**: ${SKIPPED}\n+  ## Details\n+  [Report Link](${`https://${owner}.github.io/${repo}/${REPORT_FOLDER}`})\n+\n+  [ALL Reports Link](${`https://${owner}.github.io/${repo}}/`})\n+  ## Additional Information\n+  Last updated: ${new Date().toUTCString()}\n+  `;\n+\n+   // Get all comments for this PR/issue\n+   const { data: comments } = await octokit.rest.issues.listComments({\n     owner,\n     repo,\n     issue_number: number,\n-    body: commentBody,\n-    headers: {\n-      authorization: `token ${token}`,\n-    },\n   });\n-  console.log('Comment created successfully');\n+\n+  // Look for an existing comment that starts with the same title\n+  const existingComment = comments.find(comment => \n+    comment.body.trim().startsWith(commentTitle.trim())\n+  )\n+\n+  if(existingComment) {\n+    await octokit.rest.issues.updateComment({\n+      owner,\n+      repo,\n+      comment_id: existingComment.id,\n+      body: commentBody,\n+    });\n+    console.log('Comment updated successfully');\n+  } else {\n+    await octokit.rest.issues.createComment({\n+      owner,\n+      repo,\n+      issue_number: number,\n+      body: commentBody,\n+      headers: {\n+        authorization: `token ${token}`,\n+      },\n+    });\n+    console.log('Comment created successfully');\n+  }\n } catch (error) {\n   console.error('Error creating comment:', error);\n }\ndiff --git a/.github/scripts/update-index-html.mjs b/.github/scripts/update-index-html.mjs\nnew file mode 100644\nindex 0000000..a3d2e96\n--- /dev/null\n+++ b/.github/scripts/update-index-html.mjs\n@@ -0,0 +1,95 @@\n+import * as core from '@actions/core';\n+import { getOctokit, context } from '@actions/github';\n+\n+const intialeIndexContent = (newEntry) => `\n+<!DOCTYPE html>\n+<html>\n+<head>\n+  <title>Playwright Test Reports</title>\n+  <style>\n+    body { font-family: Arial, sans-serif; margin: 20px; }\n+    h1 { color: #333; }\n+    ul { list-style-type: none; padding: 0; }\n+    li { margin: 10px 0; padding: 10px; border-bottom: 1px solid #eee; }\n+    a { color: #0366d6; text-decoration: none; }\n+    a:hover { text-decoration: underline; }\n+  </style>\n+</head>\n+<body>\n+  <h1>Playwright Test Reports</h1>\n+  <ul>\n+    ${newEntry}\n+  </ul>\n+</body>\n+</html>\n+`;\n+\n+try {\n+  const token = process.env.GITHUB_TOKEN || core.getInput('github-token');\n+  const reportFolder = process.env.REPORT_FOLDER;\n+  const passed = process.env.PASSED || '0';\n+  const failed = process.env.FAILED || '0';\n+  const flaky = process.env.FLAKY || '0';\n+  const skipped = process.env.SKIPPED || '0';\n+\n+  if (!token) {\n+    throw new Error('No GitHub token provided.');\n+  }\n+\n+  const octokit = getOctokit(token);\n+  const { owner, repo } = context.repo;\n+\n+  core.info(`Updating index.html on gh-pages for ${owner}/${repo}`);\n+\n+  const reportTitle = `Test Report ${reportFolder}`;\n+\n+  const newEntry = `<li><a href=\"${reportFolder}/index.html\">${reportTitle}</a> - Passed: ${passed}, Failed: ${failed}, Flaky: ${flaky}, Skipped: ${skipped}</li>`;\n+    \n+  let indexContent;\n+  let sha;\n+\n+  try {\n+    const { data: fileData } = await octokit.rest.repos.getContent({\n+      owner,\n+      repo,\n+      path: 'index.html',\n+      ref: 'gh-pages'\n+    });\n+    \n+    sha = fileData.sha;\n+    \n+    // Decode content from base64\n+    const content = Buffer.from(fileData.content, 'base64').toString();\n+    \n+    // Insert new entry after the <ul> tag\n+    indexContent = content.replace('<ul>', `<ul>\\n      ${newEntry}`);\n+    \n+    core.info('Existing index.html found, updating with new entry');\n+  } catch(err) {\n+    if(err.status === 404) {\n+      indexContent = intialeIndexContent(indexContent);\n+      core.info('No existing index.html found, creating a new one');\n+    } else {\n+      core.error('Error fetching index.html:', err);\n+      throw err;\n+    }\n+  }\n+\n+  // Update or create index.html file\n+  await octokit.rest.repos.createOrUpdateFileContents({\n+    owner,\n+    repo,\n+    path: 'index.html',\n+    message: `Update index.html with link to new test report: ${reportFolder}`,\n+    content: Buffer.from(indexContent).toString('base64'),\n+    branch: 'gh-pages',\n+    ...(sha && { sha })\n+  });\n+  \n+  core.info('Successfully updated index.html on gh-pages branch');\n+\n+\n+} catch (error) {\n+  core.setFailed(`Error updating index.html: ${error.message}`);\n+  if (error.stack) core.debug(error.stack);\n+}\ndiff --git a/.github/workflows/playwright.yml b/.github/workflows/playwright.yml\nindex fcb16a5..bdeff5f 100644\n--- a/.github/workflows/playwright.yml\n+++ b/.github/workflows/playwright.yml\n@@ -31,11 +31,11 @@ jobs:\n     name: Run Tests\n     needs: wait-for-deployment-url\n     runs-on: ubuntu-latest\n-    outputs:\n-      passed: ${{ steps.extract-test-results.outputs.passed }}\n-      failed: ${{ steps.extract-test-results.outputs.failed }}\n-      flaky: ${{ steps.extract-test-results.outputs.flaky }}\n-      skipped: ${{ steps.extract-test-results.outputs.skipped }}\n+    # outputs:\n+    #   passed: ${{ steps.extract-test-results.outputs.passed }}\n+    #   failed: ${{ steps.extract-test-results.outputs.failed }}\n+    #   flaky: ${{ steps.extract-test-results.outputs.flaky }}\n+    #   skipped: ${{ steps.extract-test-results.outputs.skipped }}\n     env:\n       BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n@@ -86,4 +86,21 @@ jobs:\n           commit_message: \"Deploy Playwright test report\"\n       - name: Comment on PR\n         if: ${{ github.event_name == 'pull_request' }}\n+        env:\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n         run: node .github/scripts/pr-comment.mjs\n+      - name: Update index.html\n+        if: ${{ !cancelled() }}\n+        env:\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n+        run: node .github/scripts/update-index-html.mjs\ndiff --git a/tests/example.spec.ts b/tests/example.spec.ts\nindex 54a906a..f83842f 100644\n--- a/tests/example.spec.ts\n+++ b/tests/example.spec.ts\n@@ -16,3 +16,7 @@ test('get started link', async ({ page }) => {\n   // Expects page to have a heading with the name of Installation.\n   await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n });\n+\n+test('Should fail', async ({}) => {\n+  expect(true).toBe(false);\n+})",
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "playwright-report/results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/home/runner/work/playwright-tests/playwright-tests/test-results",
        "repeatEach": 1,
        "retries": 2,
        "metadata": {
          "ci": {
            "commitHref": "https://github.com/AHP15/playwright-tests/commit/3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
            "commitHash": "3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
            "prHref": "https://github.com/AHP15/playwright-tests/pull/6",
            "prTitle": "Generate Comment summary",
            "prBaseHash": "7d70ead76c8648fee47210f3b657aa9a963c74dd",
            "buildHref": "https://github.com/AHP15/playwright-tests/actions/runs/14880234906"
          },
          "gitCommit": {
            "shortHash": "3a05ae9",
            "hash": "3a05ae90243fbc474ce1ec604cbc0b7998865eb3",
            "subject": "Merge 1379a3e53c6c63fecad8f4ecc42e4dd2631497c0 into 7d70ead76c8648fee47210f3b657aa9a963c74dd",
            "body": "Merge 1379a3e53c6c63fecad8f4ecc42e4dd2631497c0 into 7d70ead76c8648fee47210f3b657aa9a963c74dd\n",
            "author": {
              "name": "Abdessittir Harkati",
              "email": "harkati.web.dev@gmail.com",
              "time": 1746610932000
            },
            "committer": {
              "name": "GitHub",
              "email": "noreply@github.com",
              "time": 1746610932000
            },
            "branch": "HEAD"
          },
          "gitDiff": "diff --git a/.github/scripts/parse-test-results.mjs b/.github/scripts/parse-test-results.mjs\nindex f5b77d3..530496d 100644\n--- a/.github/scripts/parse-test-results.mjs\n+++ b/.github/scripts/parse-test-results.mjs\n@@ -7,6 +7,7 @@ const workspaceDir = process.env.GITHUB_WORKSPACE || '.';\n // The path to the Playwright test results file is configured in the Playwright config file.\n const reportFilePath = join(workspaceDir, 'playwright-report', 'results.json');\n \n+let total = 0;\n let passed = 0;\n let failed = 0;\n let flaky = 0;\n@@ -22,10 +23,12 @@ try {\n   const { stats } = report;\n   if (!stats) throw new Error('No suites found in test results');\n \n-  passed = stats.expected ?? 0;\n   failed = stats.unexpected ?? 0;\n   flaky = stats.flaky ?? 0;\n   skipped = stats.skipped ?? 0;\n+  total = failed + flaky + skipped;\n+  total += stats.expected ?? 0;\n+  passed = total - failed - flaky;\n \n   info(`Parsing successful: Passed=${passed}, Failed=${failed}, Flaky=${flaky}, Skipped=${skipped}`);\n \n@@ -34,6 +37,7 @@ try {\n   setFailed(`Script failed: ${err.message}`);\n }\n \n+setOutput('total', total);\n setOutput('passed', passed);\n setOutput('failed', failed);\n setOutput('flaky', flaky);\ndiff --git a/.github/scripts/pr-comment.mjs b/.github/scripts/pr-comment.mjs\nindex c9a4b9f..0eb9a84 100644\n--- a/.github/scripts/pr-comment.mjs\n+++ b/.github/scripts/pr-comment.mjs\n@@ -13,18 +13,57 @@ try {\n   const octokit = getOctokit(token);\n   const { owner, repo, number } = context.issue\n \n-  const commentBody = `Hey`;\n+  const { TOTAL, PASSED, FAILED, FLAKY, SKIPPED, REPORT_FOLDER } = process.env;\n \n-  await octokit.rest.issues.createComment({\n+  const commentTitle = `# Playwright Test Results ${FAILED > 0 ? '❌' : '✅'}`;\n+  const commentBody = `\n+  ${commentTitle}\n+  ## Summary\n+  - **Total**: ${TOTAL}\n+  - **Passed**: ${PASSED}\n+  - **Failed**: ${FAILED}\n+  - **Flaky**: ${FLAKY}\n+  - **Skipped**: ${SKIPPED}\n+  ## Details\n+  [Report Link](${`https://${owner}.github.io/${repo}/${REPORT_FOLDER}`})\n+\n+  [ALL Reports Link](${`https://${owner}.github.io/${repo}}/`})\n+  ## Additional Information\n+  Last updated: ${new Date().toUTCString()}\n+  `;\n+\n+   // Get all comments for this PR/issue\n+   const { data: comments } = await octokit.rest.issues.listComments({\n     owner,\n     repo,\n     issue_number: number,\n-    body: commentBody,\n-    headers: {\n-      authorization: `token ${token}`,\n-    },\n   });\n-  console.log('Comment created successfully');\n+\n+  // Look for an existing comment that starts with the same title\n+  const existingComment = comments.find(comment => \n+    comment.body.trim().startsWith(commentTitle.trim())\n+  )\n+\n+  if(existingComment) {\n+    await octokit.rest.issues.updateComment({\n+      owner,\n+      repo,\n+      comment_id: existingComment.id,\n+      body: commentBody,\n+    });\n+    console.log('Comment updated successfully');\n+  } else {\n+    await octokit.rest.issues.createComment({\n+      owner,\n+      repo,\n+      issue_number: number,\n+      body: commentBody,\n+      headers: {\n+        authorization: `token ${token}`,\n+      },\n+    });\n+    console.log('Comment created successfully');\n+  }\n } catch (error) {\n   console.error('Error creating comment:', error);\n }\ndiff --git a/.github/scripts/update-index-html.mjs b/.github/scripts/update-index-html.mjs\nnew file mode 100644\nindex 0000000..a3d2e96\n--- /dev/null\n+++ b/.github/scripts/update-index-html.mjs\n@@ -0,0 +1,95 @@\n+import * as core from '@actions/core';\n+import { getOctokit, context } from '@actions/github';\n+\n+const intialeIndexContent = (newEntry) => `\n+<!DOCTYPE html>\n+<html>\n+<head>\n+  <title>Playwright Test Reports</title>\n+  <style>\n+    body { font-family: Arial, sans-serif; margin: 20px; }\n+    h1 { color: #333; }\n+    ul { list-style-type: none; padding: 0; }\n+    li { margin: 10px 0; padding: 10px; border-bottom: 1px solid #eee; }\n+    a { color: #0366d6; text-decoration: none; }\n+    a:hover { text-decoration: underline; }\n+  </style>\n+</head>\n+<body>\n+  <h1>Playwright Test Reports</h1>\n+  <ul>\n+    ${newEntry}\n+  </ul>\n+</body>\n+</html>\n+`;\n+\n+try {\n+  const token = process.env.GITHUB_TOKEN || core.getInput('github-token');\n+  const reportFolder = process.env.REPORT_FOLDER;\n+  const passed = process.env.PASSED || '0';\n+  const failed = process.env.FAILED || '0';\n+  const flaky = process.env.FLAKY || '0';\n+  const skipped = process.env.SKIPPED || '0';\n+\n+  if (!token) {\n+    throw new Error('No GitHub token provided.');\n+  }\n+\n+  const octokit = getOctokit(token);\n+  const { owner, repo } = context.repo;\n+\n+  core.info(`Updating index.html on gh-pages for ${owner}/${repo}`);\n+\n+  const reportTitle = `Test Report ${reportFolder}`;\n+\n+  const newEntry = `<li><a href=\"${reportFolder}/index.html\">${reportTitle}</a> - Passed: ${passed}, Failed: ${failed}, Flaky: ${flaky}, Skipped: ${skipped}</li>`;\n+    \n+  let indexContent;\n+  let sha;\n+\n+  try {\n+    const { data: fileData } = await octokit.rest.repos.getContent({\n+      owner,\n+      repo,\n+      path: 'index.html',\n+      ref: 'gh-pages'\n+    });\n+    \n+    sha = fileData.sha;\n+    \n+    // Decode content from base64\n+    const content = Buffer.from(fileData.content, 'base64').toString();\n+    \n+    // Insert new entry after the <ul> tag\n+    indexContent = content.replace('<ul>', `<ul>\\n      ${newEntry}`);\n+    \n+    core.info('Existing index.html found, updating with new entry');\n+  } catch(err) {\n+    if(err.status === 404) {\n+      indexContent = intialeIndexContent(indexContent);\n+      core.info('No existing index.html found, creating a new one');\n+    } else {\n+      core.error('Error fetching index.html:', err);\n+      throw err;\n+    }\n+  }\n+\n+  // Update or create index.html file\n+  await octokit.rest.repos.createOrUpdateFileContents({\n+    owner,\n+    repo,\n+    path: 'index.html',\n+    message: `Update index.html with link to new test report: ${reportFolder}`,\n+    content: Buffer.from(indexContent).toString('base64'),\n+    branch: 'gh-pages',\n+    ...(sha && { sha })\n+  });\n+  \n+  core.info('Successfully updated index.html on gh-pages branch');\n+\n+\n+} catch (error) {\n+  core.setFailed(`Error updating index.html: ${error.message}`);\n+  if (error.stack) core.debug(error.stack);\n+}\ndiff --git a/.github/workflows/playwright.yml b/.github/workflows/playwright.yml\nindex fcb16a5..bdeff5f 100644\n--- a/.github/workflows/playwright.yml\n+++ b/.github/workflows/playwright.yml\n@@ -31,11 +31,11 @@ jobs:\n     name: Run Tests\n     needs: wait-for-deployment-url\n     runs-on: ubuntu-latest\n-    outputs:\n-      passed: ${{ steps.extract-test-results.outputs.passed }}\n-      failed: ${{ steps.extract-test-results.outputs.failed }}\n-      flaky: ${{ steps.extract-test-results.outputs.flaky }}\n-      skipped: ${{ steps.extract-test-results.outputs.skipped }}\n+    # outputs:\n+    #   passed: ${{ steps.extract-test-results.outputs.passed }}\n+    #   failed: ${{ steps.extract-test-results.outputs.failed }}\n+    #   flaky: ${{ steps.extract-test-results.outputs.flaky }}\n+    #   skipped: ${{ steps.extract-test-results.outputs.skipped }}\n     env:\n       BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n@@ -86,4 +86,21 @@ jobs:\n           commit_message: \"Deploy Playwright test report\"\n       - name: Comment on PR\n         if: ${{ github.event_name == 'pull_request' }}\n+        env:\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n         run: node .github/scripts/pr-comment.mjs\n+      - name: Update index.html\n+        if: ${{ !cancelled() }}\n+        env:\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n+        run: node .github/scripts/update-index-html.mjs\ndiff --git a/tests/example.spec.ts b/tests/example.spec.ts\nindex 54a906a..f83842f 100644\n--- a/tests/example.spec.ts\n+++ b/tests/example.spec.ts\n@@ -16,3 +16,7 @@ test('get started link', async ({ page }) => {\n   // Expects page to have a heading with the name of Installation.\n   await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n });\n+\n+test('Should fail', async ({}) => {\n+  expect(true).toBe(false);\n+})",
          "actualWorkers": 1
        },
        "id": "chromium",
        "name": "chromium",
        "testDir": "/home/runner/work/playwright-tests/playwright-tests/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.52.0",
    "workers": 1,
    "webServer": null
  },
  "suites": [
    {
      "title": "example.spec.ts",
      "file": "example.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "has title",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "parallelIndex": 0,
                  "status": "passed",
                  "duration": 777,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2025-05-07T09:44:19.110Z",
                  "annotations": [],
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "a30a6eba6312f6b87ea5-b06063a3e613764d08f8",
          "file": "example.spec.ts",
          "line": 3,
          "column": 1
        },
        {
          "title": "get started link",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "parallelIndex": 0,
                  "status": "passed",
                  "duration": 564,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2025-05-07T09:44:21.788Z",
                  "annotations": [],
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "a30a6eba6312f6b87ea5-274e97907a6e3638a22f",
          "file": "example.spec.ts",
          "line": 10,
          "column": 1
        },
        {
          "title": "Should fail",
          "ok": false,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "parallelIndex": 0,
                  "status": "failed",
                  "duration": 3,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16",
                    "location": {
                      "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                      "column": 16,
                      "line": 21
                    },
                    "snippet": "\u001b[0m \u001b[90m 19 |\u001b[39m\n \u001b[90m 20 |\u001b[39m test(\u001b[32m'Should fail'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m ({}) \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   expect(\u001b[36mtrue\u001b[39m)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 22 |\u001b[39m })\n \u001b[90m 23 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                        "column": 16,
                        "line": 21
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n\n  19 |\n  20 | test('Should fail', async ({}) => {\n> 21 |   expect(true).toBe(false);\n     |                ^\n  22 | })\n  23 |\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2025-05-07T09:44:22.357Z",
                  "annotations": [],
                  "attachments": [
                    {
                      "name": "_error-context-0",
                      "contentType": "text/markdown",
                      "path": "/home/runner/work/playwright-tests/playwright-tests/test-results/example-Should-fail-chromium/error-context.md"
                    }
                  ],
                  "errorLocation": {
                    "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                    "column": 16,
                    "line": 21
                  }
                },
                {
                  "workerIndex": 1,
                  "parallelIndex": 0,
                  "status": "failed",
                  "duration": 10,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16",
                    "location": {
                      "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                      "column": 16,
                      "line": 21
                    },
                    "snippet": "\u001b[0m \u001b[90m 19 |\u001b[39m\n \u001b[90m 20 |\u001b[39m test(\u001b[32m'Should fail'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m ({}) \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   expect(\u001b[36mtrue\u001b[39m)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 22 |\u001b[39m })\n \u001b[90m 23 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                        "column": 16,
                        "line": 21
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n\n  19 |\n  20 | test('Should fail', async ({}) => {\n> 21 |   expect(true).toBe(false);\n     |                ^\n  22 | })\n  23 |\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 1,
                  "startTime": "2025-05-07T09:44:23.150Z",
                  "annotations": [],
                  "attachments": [
                    {
                      "name": "_error-context-0",
                      "contentType": "text/markdown",
                      "path": "/home/runner/work/playwright-tests/playwright-tests/test-results/example-Should-fail-chromium-retry1/error-context.md"
                    },
                    {
                      "name": "trace",
                      "contentType": "application/zip",
                      "path": "/home/runner/work/playwright-tests/playwright-tests/test-results/example-Should-fail-chromium-retry1/trace.zip"
                    }
                  ],
                  "errorLocation": {
                    "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                    "column": 16,
                    "line": 21
                  }
                },
                {
                  "workerIndex": 2,
                  "parallelIndex": 0,
                  "status": "failed",
                  "duration": 9,
                  "error": {
                    "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m",
                    "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16",
                    "location": {
                      "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                      "column": 16,
                      "line": 21
                    },
                    "snippet": "\u001b[0m \u001b[90m 19 |\u001b[39m\n \u001b[90m 20 |\u001b[39m test(\u001b[32m'Should fail'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m ({}) \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   expect(\u001b[36mtrue\u001b[39m)\u001b[33m.\u001b[39mtoBe(\u001b[36mfalse\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 22 |\u001b[39m })\n \u001b[90m 23 |\u001b[39m\u001b[0m"
                  },
                  "errors": [
                    {
                      "location": {
                        "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                        "column": 16,
                        "line": 21
                      },
                      "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mfalse\u001b[39m\nReceived: \u001b[31mtrue\u001b[39m\n\n  19 |\n  20 | test('Should fail', async ({}) => {\n> 21 |   expect(true).toBe(false);\n     |                ^\n  22 | })\n  23 |\n    at /home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts:21:16"
                    }
                  ],
                  "stdout": [],
                  "stderr": [],
                  "retry": 2,
                  "startTime": "2025-05-07T09:44:23.869Z",
                  "annotations": [],
                  "attachments": [
                    {
                      "name": "_error-context-0",
                      "contentType": "text/markdown",
                      "path": "/home/runner/work/playwright-tests/playwright-tests/test-results/example-Should-fail-chromium-retry2/error-context.md"
                    }
                  ],
                  "errorLocation": {
                    "file": "/home/runner/work/playwright-tests/playwright-tests/tests/example.spec.ts",
                    "column": 16,
                    "line": 21
                  }
                }
              ],
              "status": "unexpected"
            }
          ],
          "id": "a30a6eba6312f6b87ea5-3ea5ca4fa83ba72684b3",
          "file": "example.spec.ts",
          "line": 20,
          "column": 1
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-05-07T09:44:18.040Z",
    "duration": 5862.166,
    "expected": 2,
    "skipped": 0,
    "unexpected": 1,
    "flaky": 0
  }
}