{
  "config": {
    "configFile": "/home/runner/work/playwright-tests/playwright-tests/playwright.config.ts",
    "rootDir": "/home/runner/work/playwright-tests/playwright-tests/tests",
    "forbidOnly": true,
    "fullyParallel": true,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "ci": {
        "commitHref": "https://github.com/AHP15/playwright-tests/commit/0ab4d927430307948346b28badfdd5c70fcad130",
        "commitHash": "0ab4d927430307948346b28badfdd5c70fcad130",
        "prHref": "https://github.com/AHP15/playwright-tests/pull/6",
        "prTitle": "Generate Comment summary",
        "prBaseHash": "7d70ead76c8648fee47210f3b657aa9a963c74dd",
        "buildHref": "https://github.com/AHP15/playwright-tests/actions/runs/14879084834"
      },
      "gitCommit": {
        "shortHash": "0ab4d92",
        "hash": "0ab4d927430307948346b28badfdd5c70fcad130",
        "subject": "Merge 1754f18079d13d269f63ad10a73b6e476744a716 into 7d70ead76c8648fee47210f3b657aa9a963c74dd",
        "body": "Merge 1754f18079d13d269f63ad10a73b6e476744a716 into 7d70ead76c8648fee47210f3b657aa9a963c74dd\n",
        "author": {
          "name": "Abdessittir Harkati",
          "email": "harkati.web.dev@gmail.com",
          "time": 1746607480000
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "time": 1746607480000
        },
        "branch": "HEAD"
      },
      "gitDiff": "diff --git a/.github/scripts/parse-test-results.mjs b/.github/scripts/parse-test-results.mjs\nindex f5b77d3..6d1bec3 100644\n--- a/.github/scripts/parse-test-results.mjs\n+++ b/.github/scripts/parse-test-results.mjs\n@@ -7,6 +7,7 @@ const workspaceDir = process.env.GITHUB_WORKSPACE || '.';\n // The path to the Playwright test results file is configured in the Playwright config file.\n const reportFilePath = join(workspaceDir, 'playwright-report', 'results.json');\n \n+let total = 0;\n let passed = 0;\n let failed = 0;\n let flaky = 0;\n@@ -22,10 +23,11 @@ try {\n   const { stats } = report;\n   if (!stats) throw new Error('No suites found in test results');\n \n-  passed = stats.expected ?? 0;\n+  total = stats.expected ?? 0;\n   failed = stats.unexpected ?? 0;\n   flaky = stats.flaky ?? 0;\n   skipped = stats.skipped ?? 0;\n+  passed = total - failed - flaky;\n \n   info(`Parsing successful: Passed=${passed}, Failed=${failed}, Flaky=${flaky}, Skipped=${skipped}`);\n \n@@ -34,6 +36,7 @@ try {\n   setFailed(`Script failed: ${err.message}`);\n }\n \n+setOutput('total', total);\n setOutput('passed', passed);\n setOutput('failed', failed);\n setOutput('flaky', flaky);\ndiff --git a/.github/scripts/pr-comment.mjs b/.github/scripts/pr-comment.mjs\nindex c9a4b9f..4abe7f1 100644\n--- a/.github/scripts/pr-comment.mjs\n+++ b/.github/scripts/pr-comment.mjs\n@@ -13,18 +13,53 @@ try {\n   const octokit = getOctokit(token);\n   const { owner, repo, number } = context.issue\n \n-  const commentBody = `Hey`;\n+  const { TOTAL, PASSED, FAILED, FLAKY, SKIPPED, BASE_URL, REPORT_FOLDER } = process.env;\n \n-  await octokit.rest.issues.createComment({\n+  const commentTitle = `# Playwright Test Results ${FAILED > 0 ? '❌' : '✅'}`;\n+  const commentBody = `\n+  ${commentTitle}\n+  ## Summary\n+  - **Total**: ${TOTAL}\n+  - **Passed**: ${PASSED}\n+  - **Failed**: ${FAILED}\n+  - **Flaky**: ${FLAKY}\n+  - **Skipped**: ${SKIPPED}\n+  ## Details\n+  [Report Link](${BASE_URL}/${REPORT_FOLDER})\n+  `;\n+\n+   // Get all comments for this PR/issue\n+   const { data: comments } = await octokit.rest.issues.listComments({\n     owner,\n     repo,\n     issue_number: number,\n-    body: commentBody,\n-    headers: {\n-      authorization: `token ${token}`,\n-    },\n   });\n-  console.log('Comment created successfully');\n+\n+  // Look for an existing comment that starts with the same title\n+  const existingComment = comments.find(comment => \n+    comment.body.trim().startsWith(commentTitle.trim())\n+  )\n+\n+  if(existingComment) {\n+    await octokit.rest.issues.updateComment({\n+      owner,\n+      repo,\n+      comment_id: existingComment.id,\n+      body: commentBody,\n+    });\n+    console.log('Comment updated successfully');\n+  } else {\n+    await octokit.rest.issues.createComment({\n+      owner,\n+      repo,\n+      issue_number: number,\n+      body: commentBody,\n+      headers: {\n+        authorization: `token ${token}`,\n+      },\n+    });\n+    console.log('Comment created successfully');\n+  }\n } catch (error) {\n   console.error('Error creating comment:', error);\n }\ndiff --git a/.github/workflows/playwright.yml b/.github/workflows/playwright.yml\nindex fcb16a5..4ca156e 100644\n--- a/.github/workflows/playwright.yml\n+++ b/.github/workflows/playwright.yml\n@@ -31,11 +31,11 @@ jobs:\n     name: Run Tests\n     needs: wait-for-deployment-url\n     runs-on: ubuntu-latest\n-    outputs:\n-      passed: ${{ steps.extract-test-results.outputs.passed }}\n-      failed: ${{ steps.extract-test-results.outputs.failed }}\n-      flaky: ${{ steps.extract-test-results.outputs.flaky }}\n-      skipped: ${{ steps.extract-test-results.outputs.skipped }}\n+    # outputs:\n+    #   passed: ${{ steps.extract-test-results.outputs.passed }}\n+    #   failed: ${{ steps.extract-test-results.outputs.failed }}\n+    #   flaky: ${{ steps.extract-test-results.outputs.flaky }}\n+    #   skipped: ${{ steps.extract-test-results.outputs.skipped }}\n     env:\n       BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n@@ -86,4 +86,12 @@ jobs:\n           commit_message: \"Deploy Playwright test report\"\n       - name: Comment on PR\n         if: ${{ github.event_name == 'pull_request' }}\n+        env:\n+          BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n         run: node .github/scripts/pr-comment.mjs",
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "playwright-report/results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/home/runner/work/playwright-tests/playwright-tests/test-results",
        "repeatEach": 1,
        "retries": 2,
        "metadata": {
          "ci": {
            "commitHref": "https://github.com/AHP15/playwright-tests/commit/0ab4d927430307948346b28badfdd5c70fcad130",
            "commitHash": "0ab4d927430307948346b28badfdd5c70fcad130",
            "prHref": "https://github.com/AHP15/playwright-tests/pull/6",
            "prTitle": "Generate Comment summary",
            "prBaseHash": "7d70ead76c8648fee47210f3b657aa9a963c74dd",
            "buildHref": "https://github.com/AHP15/playwright-tests/actions/runs/14879084834"
          },
          "gitCommit": {
            "shortHash": "0ab4d92",
            "hash": "0ab4d927430307948346b28badfdd5c70fcad130",
            "subject": "Merge 1754f18079d13d269f63ad10a73b6e476744a716 into 7d70ead76c8648fee47210f3b657aa9a963c74dd",
            "body": "Merge 1754f18079d13d269f63ad10a73b6e476744a716 into 7d70ead76c8648fee47210f3b657aa9a963c74dd\n",
            "author": {
              "name": "Abdessittir Harkati",
              "email": "harkati.web.dev@gmail.com",
              "time": 1746607480000
            },
            "committer": {
              "name": "GitHub",
              "email": "noreply@github.com",
              "time": 1746607480000
            },
            "branch": "HEAD"
          },
          "gitDiff": "diff --git a/.github/scripts/parse-test-results.mjs b/.github/scripts/parse-test-results.mjs\nindex f5b77d3..6d1bec3 100644\n--- a/.github/scripts/parse-test-results.mjs\n+++ b/.github/scripts/parse-test-results.mjs\n@@ -7,6 +7,7 @@ const workspaceDir = process.env.GITHUB_WORKSPACE || '.';\n // The path to the Playwright test results file is configured in the Playwright config file.\n const reportFilePath = join(workspaceDir, 'playwright-report', 'results.json');\n \n+let total = 0;\n let passed = 0;\n let failed = 0;\n let flaky = 0;\n@@ -22,10 +23,11 @@ try {\n   const { stats } = report;\n   if (!stats) throw new Error('No suites found in test results');\n \n-  passed = stats.expected ?? 0;\n+  total = stats.expected ?? 0;\n   failed = stats.unexpected ?? 0;\n   flaky = stats.flaky ?? 0;\n   skipped = stats.skipped ?? 0;\n+  passed = total - failed - flaky;\n \n   info(`Parsing successful: Passed=${passed}, Failed=${failed}, Flaky=${flaky}, Skipped=${skipped}`);\n \n@@ -34,6 +36,7 @@ try {\n   setFailed(`Script failed: ${err.message}`);\n }\n \n+setOutput('total', total);\n setOutput('passed', passed);\n setOutput('failed', failed);\n setOutput('flaky', flaky);\ndiff --git a/.github/scripts/pr-comment.mjs b/.github/scripts/pr-comment.mjs\nindex c9a4b9f..4abe7f1 100644\n--- a/.github/scripts/pr-comment.mjs\n+++ b/.github/scripts/pr-comment.mjs\n@@ -13,18 +13,53 @@ try {\n   const octokit = getOctokit(token);\n   const { owner, repo, number } = context.issue\n \n-  const commentBody = `Hey`;\n+  const { TOTAL, PASSED, FAILED, FLAKY, SKIPPED, BASE_URL, REPORT_FOLDER } = process.env;\n \n-  await octokit.rest.issues.createComment({\n+  const commentTitle = `# Playwright Test Results ${FAILED > 0 ? '❌' : '✅'}`;\n+  const commentBody = `\n+  ${commentTitle}\n+  ## Summary\n+  - **Total**: ${TOTAL}\n+  - **Passed**: ${PASSED}\n+  - **Failed**: ${FAILED}\n+  - **Flaky**: ${FLAKY}\n+  - **Skipped**: ${SKIPPED}\n+  ## Details\n+  [Report Link](${BASE_URL}/${REPORT_FOLDER})\n+  `;\n+\n+   // Get all comments for this PR/issue\n+   const { data: comments } = await octokit.rest.issues.listComments({\n     owner,\n     repo,\n     issue_number: number,\n-    body: commentBody,\n-    headers: {\n-      authorization: `token ${token}`,\n-    },\n   });\n-  console.log('Comment created successfully');\n+\n+  // Look for an existing comment that starts with the same title\n+  const existingComment = comments.find(comment => \n+    comment.body.trim().startsWith(commentTitle.trim())\n+  )\n+\n+  if(existingComment) {\n+    await octokit.rest.issues.updateComment({\n+      owner,\n+      repo,\n+      comment_id: existingComment.id,\n+      body: commentBody,\n+    });\n+    console.log('Comment updated successfully');\n+  } else {\n+    await octokit.rest.issues.createComment({\n+      owner,\n+      repo,\n+      issue_number: number,\n+      body: commentBody,\n+      headers: {\n+        authorization: `token ${token}`,\n+      },\n+    });\n+    console.log('Comment created successfully');\n+  }\n } catch (error) {\n   console.error('Error creating comment:', error);\n }\ndiff --git a/.github/workflows/playwright.yml b/.github/workflows/playwright.yml\nindex fcb16a5..4ca156e 100644\n--- a/.github/workflows/playwright.yml\n+++ b/.github/workflows/playwright.yml\n@@ -31,11 +31,11 @@ jobs:\n     name: Run Tests\n     needs: wait-for-deployment-url\n     runs-on: ubuntu-latest\n-    outputs:\n-      passed: ${{ steps.extract-test-results.outputs.passed }}\n-      failed: ${{ steps.extract-test-results.outputs.failed }}\n-      flaky: ${{ steps.extract-test-results.outputs.flaky }}\n-      skipped: ${{ steps.extract-test-results.outputs.skipped }}\n+    # outputs:\n+    #   passed: ${{ steps.extract-test-results.outputs.passed }}\n+    #   failed: ${{ steps.extract-test-results.outputs.failed }}\n+    #   flaky: ${{ steps.extract-test-results.outputs.flaky }}\n+    #   skipped: ${{ steps.extract-test-results.outputs.skipped }}\n     env:\n       BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n@@ -86,4 +86,12 @@ jobs:\n           commit_message: \"Deploy Playwright test report\"\n       - name: Comment on PR\n         if: ${{ github.event_name == 'pull_request' }}\n+        env:\n+          BASE_URL: ${{ needs.wait-for-deployment-url.outputs.deployment_url }}\n+          REPORT_FOLDER: ${{ steps.generate-folder-name.outputs.folder_name }}\n+          TOTAL: ${{ steps.extract-test-results.outputs.total }}\n+          PASSED: ${{ steps.extract-test-results.outputs.passed }}\n+          FAILED: ${{ steps.extract-test-results.outputs.failed }}\n+          FLAKY: ${{ steps.extract-test-results.outputs.flaky }}\n+          SKIPPED: ${{ steps.extract-test-results.outputs.skipped }}\n         run: node .github/scripts/pr-comment.mjs",
          "actualWorkers": 1
        },
        "id": "chromium",
        "name": "chromium",
        "testDir": "/home/runner/work/playwright-tests/playwright-tests/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.52.0",
    "workers": 1,
    "webServer": null
  },
  "suites": [
    {
      "title": "example.spec.ts",
      "file": "example.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [
        {
          "title": "has title",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "parallelIndex": 0,
                  "status": "passed",
                  "duration": 362,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2025-05-07T08:45:57.247Z",
                  "annotations": [],
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "a30a6eba6312f6b87ea5-b06063a3e613764d08f8",
          "file": "example.spec.ts",
          "line": 3,
          "column": 1
        },
        {
          "title": "get started link",
          "ok": true,
          "tags": [],
          "tests": [
            {
              "timeout": 30000,
              "annotations": [],
              "expectedStatus": "passed",
              "projectId": "chromium",
              "projectName": "chromium",
              "results": [
                {
                  "workerIndex": 0,
                  "parallelIndex": 0,
                  "status": "passed",
                  "duration": 495,
                  "errors": [],
                  "stdout": [],
                  "stderr": [],
                  "retry": 0,
                  "startTime": "2025-05-07T08:45:57.867Z",
                  "annotations": [],
                  "attachments": []
                }
              ],
              "status": "expected"
            }
          ],
          "id": "a30a6eba6312f6b87ea5-274e97907a6e3638a22f",
          "file": "example.spec.ts",
          "line": 10,
          "column": 1
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-05-07T08:45:56.310Z",
    "duration": 2107.81,
    "expected": 2,
    "skipped": 0,
    "unexpected": 0,
    "flaky": 0
  }
}